diff --git a/src/apps/concepts/components/ConceptForm.tsx b/src/apps/concepts/components/ConceptForm.tsx
index 8fa57a2..0a80833 100644
--- a/src/apps/concepts/components/ConceptForm.tsx
+++ b/src/apps/concepts/components/ConceptForm.tsx
@@ -3,8 +3,8 @@ import { ErrorMessage, Field, FieldArray, Form, Formik } from "formik";
 import {
   Concept,
   ConceptDescription,
+  ConceptExtras,
   ConceptName,
-  Extras,
   Mapping
 } from "../types";
 import uuid from "uuid";
@@ -125,7 +125,7 @@ const buildInitialValues = (
   names
 });
 
-const ExtrasSchema = Yup.object().shape<Extras>({
+const ExtrasSchema = Yup.object().shape<ConceptExtras>({
   hi_absolute: Yup.number().notRequired(),
   hi_critical: Yup.number().notRequired(),
   hi_normal: Yup.number().notRequired(),
diff --git a/src/apps/concepts/types.ts b/src/apps/concepts/types.ts
index 2b4fe8d..05ab465 100644
--- a/src/apps/concepts/types.ts
+++ b/src/apps/concepts/types.ts
@@ -1,4 +1,4 @@
-import { MAP_TYPE_CONCEPT_SET, MAP_TYPE_Q_AND_A } from "../../utils";
+import { Extras, MAP_TYPE_CONCEPT_SET, MAP_TYPE_Q_AND_A } from "../../utils";
 
 export interface ConceptName {
   name: string;
@@ -25,6 +25,8 @@ export interface Mapping {
   to_concept_name?: string | null;
   url?: string;
   retired?: boolean;
+  extras?: { sort_weight?: number } |
+    Omit<Extras, "sort_weight">;
 }
 
 export interface APIMapping extends Mapping {
@@ -37,7 +39,7 @@ export interface InternalAPIMapping extends APIMapping {
   to_concept_url: string;
 }
 
-export interface Extras {
+export interface NumericConceptExtras {
   hi_absolute?: number;
   hi_critical?: number;
   hi_normal?: number;
@@ -48,6 +50,10 @@ export interface Extras {
   precise?: boolean;
 }
 
+export type ConceptExtras = NumericConceptExtras |
+  Omit<Extras, keyof NumericConceptExtras>
+  
+
 export interface BaseConcept {
   id: string;
   external_id: string;
@@ -57,7 +63,7 @@ export interface BaseConcept {
   descriptions: ConceptDescription[];
   url?: string;
   version_url?: string;
-  extras: Extras | null;
+  extras?: ConceptExtras | null;
 }
 
 export interface Concept extends BaseConcept {
diff --git a/src/apps/dictionaries/types.ts b/src/apps/dictionaries/types.ts
index cbb849b..f40c081 100644
--- a/src/apps/dictionaries/types.ts
+++ b/src/apps/dictionaries/types.ts
@@ -1,13 +1,14 @@
 import {
   BaseConceptContainer,
   EditableConceptContainerFields,
+  Extras,
   Version
 } from "../../utils";
 import { pick } from 'lodash';
 
 interface BaseDictionary extends BaseConceptContainer {
   preferred_source: string;
-  extras?: { source?: string };
+  extras?: { source?: string } | Omit<Extras, "source">;
 }
 
 export interface Dictionary extends BaseDictionary {
@@ -21,7 +22,7 @@ interface BaseAPIDictionary extends BaseDictionary {
   full_name: string;
   website: string;
   custom_validation_schema: string;
-  extras: { source: string };
+  extras: { source: string } | Omit<Extras, "source">;
 }
 
 export interface NewAPIDictionary extends BaseAPIDictionary {
@@ -52,7 +53,7 @@ export interface DictionaryState {
 export interface EditableDictionaryFields
   extends EditableConceptContainerFields {
   public_access?: string;
-  extras?: { source?: string };
+  extras?: { source?: string } | Omit<Extras, "source">;
 }
 
 export interface DictionaryVersion extends Version{
diff --git a/src/utils/types.ts b/src/utils/types.ts
index de04dac..2bfb175 100644
--- a/src/utils/types.ts
+++ b/src/utils/types.ts
@@ -9,12 +9,17 @@ export interface OptionResponse {
   additional: {};
 }
 
+export interface Extras {
+  [key: string]: string | undefined;
+}
+
 export interface BaseConceptContainer {
   name: string;
   short_code: string;
   description: string;
   public_access: string;
   default_locale: string;
+  extras?: Extras;
 }
 
 export interface EditableConceptContainerFields {
@@ -30,6 +35,6 @@ export interface Version {
   released: boolean;
   description?: string;
   external_id: string;
-  extras?: { [key: string]: string };
+  extras?: Extras;
   created_on?: string;
-}
\ No newline at end of file
+}
